//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// Этот исходный код был создан с помощью wsdl, версия=4.6.81.0.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_ICacheService", Namespace="http://tempuri.org/")]
public partial class CacheServer : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback notifyReferationOperationCompleted;
    
    private System.Threading.SendOrPostCallback cacheFileExistsOperationCompleted;
    
    private System.Threading.SendOrPostCallback getCachedFileOperationCompleted;
    
    /// <remarks/>
    public CacheServer(string URL) {
        this.Url = URL;
    }
    
    /// <remarks/>
    public event notifyReferationCompletedEventHandler notifyReferationCompleted;
    
    /// <remarks/>
    public event cacheFileExistsCompletedEventHandler cacheFileExistsCompleted;
    
    /// <remarks/>
    public event getCachedFileCompletedEventHandler getCachedFileCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ICacheService/notifyReferation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void notifyReferation([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string URL) {
        this.Invoke("notifyReferation", new object[] {
                    URL});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginnotifyReferation(string URL, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("notifyReferation", new object[] {
                    URL}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndnotifyReferation(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void notifyReferationAsync(string URL) {
        this.notifyReferationAsync(URL, null);
    }
    
    /// <remarks/>
    public void notifyReferationAsync(string URL, object userState) {
        if ((this.notifyReferationOperationCompleted == null)) {
            this.notifyReferationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnnotifyReferationOperationCompleted);
        }
        this.InvokeAsync("notifyReferation", new object[] {
                    URL}, this.notifyReferationOperationCompleted, userState);
    }
    
    private void OnnotifyReferationOperationCompleted(object arg) {
        if ((this.notifyReferationCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.notifyReferationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ICacheService/cacheFileExists", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void cacheFileExists([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string URL, out bool cacheFileExistsResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool cacheFileExistsResultSpecified) {
        object[] results = this.Invoke("cacheFileExists", new object[] {
                    URL});
        cacheFileExistsResult = ((bool)(results[0]));
        cacheFileExistsResultSpecified = ((bool)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegincacheFileExists(string URL, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("cacheFileExists", new object[] {
                    URL}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndcacheFileExists(System.IAsyncResult asyncResult, out bool cacheFileExistsResult, out bool cacheFileExistsResultSpecified) {
        object[] results = this.EndInvoke(asyncResult);
        cacheFileExistsResult = ((bool)(results[0]));
        cacheFileExistsResultSpecified = ((bool)(results[1]));
    }
    
    /// <remarks/>
    public void cacheFileExistsAsync(string URL) {
        this.cacheFileExistsAsync(URL, null);
    }
    
    /// <remarks/>
    public void cacheFileExistsAsync(string URL, object userState) {
        if ((this.cacheFileExistsOperationCompleted == null)) {
            this.cacheFileExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OncacheFileExistsOperationCompleted);
        }
        this.InvokeAsync("cacheFileExists", new object[] {
                    URL}, this.cacheFileExistsOperationCompleted, userState);
    }
    
    private void OncacheFileExistsOperationCompleted(object arg) {
        if ((this.cacheFileExistsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.cacheFileExistsCompleted(this, new cacheFileExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ICacheService/getCachedFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public string getCachedFile([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string URL) {
        object[] results = this.Invoke("getCachedFile", new object[] {
                    URL});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetCachedFile(string URL, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getCachedFile", new object[] {
                    URL}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndgetCachedFile(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void getCachedFileAsync(string URL) {
        this.getCachedFileAsync(URL, null);
    }
    
    /// <remarks/>
    public void getCachedFileAsync(string URL, object userState) {
        if ((this.getCachedFileOperationCompleted == null)) {
            this.getCachedFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCachedFileOperationCompleted);
        }
        this.InvokeAsync("getCachedFile", new object[] {
                    URL}, this.getCachedFileOperationCompleted, userState);
    }
    
    private void OngetCachedFileOperationCompleted(object arg) {
        if ((this.getCachedFileCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getCachedFileCompleted(this, new getCachedFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
public delegate void notifyReferationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
public delegate void cacheFileExistsCompletedEventHandler(object sender, cacheFileExistsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class cacheFileExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal cacheFileExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool cacheFileExistsResult {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public bool cacheFileExistsResultSpecified {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
public delegate void getCachedFileCompletedEventHandler(object sender, getCachedFileCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getCachedFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getCachedFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}
